---
layout: post
title:  "循环单词(字符串操作)"
categories: 算法
---

如果一个单词通过循环右移获得的单词，我们称这些单词都为一种循环单词。 例如：picture 和 turepic 就是属于同一种循环单词。 现在给出n个单词，需要统计这个n个单词中有多少种循环单词。 
#### 输入描述:
&emsp;输入包括n+1行：
&emsp;第一行为单词个数n(1 ≤ n ≤ 50)
&emsp;接下来的n行，每行一个单词word[i]，长度length(1 ≤ length ≤ 50)。由小写字母构成
#### 输出描述:
&emsp;输出循环单词的种数

#### 输入例子:
5  
picture  
turepic  
icturep  
word  
ordw  

#### 输出例子:
2

**思路**：利用HashMap作为数据结构，用当前字符串与HashMap中的key(字符串)进行匹配，若匹配成功则其value加1，否则加入新的字符串，并令value=1。

{% highlight java linenos %}
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;
public class Main {
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner sc = new Scanner(System.in);
		int t = sc.nextInt();
		HashMap<String, Integer> map = new HashMap<String, Integer>();
		while(t-- != 0){
			String str = sc.next();
			if (map.isEmpty()){
				map.put(str, 1);
			}else{
				boolean match = false;
				for (Map.Entry<String, Integer> entry : map.entrySet()){
					if (compare(entry.getKey(), str)){
						map.put(entry.getKey(), entry.getValue() + 1);
						match = true;
						break;
					}
				}
				if(!match)
					map.put(str, 1);
			}
		}
		System.out.println(map.size());
	}
	
	public static boolean compare(String src, String target){
		if (src.length() != target.length())
			return false;
		src = src + src;
		if (src.contains(target))
			return true;
		else
			return false;
	}
}

{% endhighlight %}

第一次提交运行出现错误，原因是我的匹配过程是采取的将源字符串重复一次，即src = src + src,然后判断target是否为新src的子串。<font color='red'>这样会导致一个bug,若src = "aa", target = "a",</font>同样会匹配成功，但这不符合题意。**所以在判断之前需要判断两个字符串长度是否相等。**