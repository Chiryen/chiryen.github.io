---
layout: post
title:  "MySQL读书笔记-索引"
date:   2019-07-01 11:11:41 +0800
categories: MySQL
---

索引相当于一本书的目录。  
索引太多，程序性能会受影响；索引太少，查询性能会产生影响。

###  B+树索引
B+树中的B不代表二叉（binary），而是代表平衡(balance)，因为B+树是从最早的平衡二叉树演化而来，但是B+树不是二叉树。
B+树索引在MySQL中分为聚集索引（主键索引）和辅助索引（普通索引、非聚集索引）。

#### 聚集索引
聚集索引按照每张表的主键构造一棵B+树，同时叶子节点存放的即为整张表的行记录数据，聚集索引的叶子节点也称为数据页，每个数据页都通过一个双向链表进行连接。

#### 辅助索引
辅助索引的叶子节点包含键值和书签（bookmark）。该书签用来告诉InnoDB存储引擎哪里可以找到与索引相对应的行数据，书签就是相应行数据的聚集索引键。

#### 联合索引
联合索引也称为复合索引。联合索引创建时，要考虑最左前缀匹配原则。mysql会一直向右匹配直到遇到范围查询(>、<、between、like)就停止匹配

#### 覆盖索引
覆盖索引指一个查询语句的执行只需要从辅助索引中就可以得到查询记录，而不需要查询聚集索引中的记录。优点显而易见，辅助索引不包含一整行的记录，因此使用覆盖索引可以大大减少IO操作。

### Cardinality值
具有高选择性的字段才适合添加索引。高选择性，即字段的取值范围很广，几乎没有重复，例如姓名、分数。低选择性的字段例如性别。  
怎样查看索引是否是高选择性的呢？可以通过SHOW INDEX结果中的Cardinality来观察。Cardinality值表示索引中不重复记录数量的预估值。在实际应用中，Cardinality/n_row_in_table应尽可能接近于1.




> 在实际的生产环境使用中，每个DBA和开发人员，还是需要根据自己的具体生产环境来使用索引，并观察索引使用的情况，判断是否需要添加索引。不要盲从任务人给你的经验意见，Think Different.

参考资料：  
[MySQL索引背后的数据结构及算法原理]

[MySQL索引原理及慢查询优化] 

[MySQL索引背后的数据结构及算法原理]:http://blog.codinglabs.org/articles/theory-of-mysql-index.html 
[MySQL索引原理及慢查询优化]:https://tech.meituan.com/2014/06/30/mysql-index.html
