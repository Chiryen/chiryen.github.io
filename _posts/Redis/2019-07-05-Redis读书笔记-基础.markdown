---
layout: post
title:  "Redis读书笔记-基础"
date:   2019-10-13 17:35:34 +0800
categories: MySQL
---

## Redis基础数据结构
Redis 所有的数据结构都是以唯一的 key 字符串作为名称，然后通过这个唯一 key 值来获取相应的 value 数据。不同类型的数据结 构的差异就在于 value 的结构不一样。  
Redis 有5种基础数据结构，分别为:string (字符串)、list (列表)、hash (哈希)、set (集合) 和 zset (有序集合)

| redis数据结构 | 类似数据结构 | 常见用途 |
| :---: | :---: | :---: |
| string | ArrayList | 缓存数值、对象 |
| list | LinkedList | 异步队列 |
| hash | HashMap | 缓存多个键值 |
| set | HashSet | 缓存键 |
| zset | SkipList | 缓存对象需要排序 |

[存储结构体信息到底该使用hash还是string?]
一楼解答的就是局部常用还是整体常用的问题。局部常用就使用hash，整体常用就使用string。


## 原理

### 线程IO模型
Redis是个单线程程序。不要对单线程有什么偏见，Redis单线程还那么快，是因为它的所有数据都在内存中，所有的运算也都是内存级别的运算。由于是单线程，对于时间复杂度为O(n)的指令要慎用，否则易导致卡顿。  

既然是单线程，如何处理那么多的并发客户端连接？  
Redis采用是非阻塞IO+多路复用。非阻塞对象在套接字对象上提供了一个选项Non_blocking, 操作系统内核为套接字分配了读缓冲区和写缓冲区，能读多少，能写多少，取决于缓冲区的大小。redis线程把数据放在缓冲区后就可以做别的事了。  
非阻塞IO有一个问题，就是线程何时知道去读写缓冲区，比如线程怎么知道读缓冲区里有数据可以读，谁来通知它呢？  
事件轮询（多路复用）登场。最简单的事件轮询API是select函数，它是操作系统提供给用户程序的API。它的功能是循环地去监听描述符，看是否有读写事件到来。参数和返回值如下：
	
	read_events, write_events = select(read_fds, write_fds, timeout)
	
read\_fds, write\_fds是读写描述符列表，timeount是超时时间，如果没有事件到来，线程处于阻塞状态，最多等待timeout时间。现代操作系统的事件轮询API已不再使用select，而改用epoll和kqueue。

Redis设置了指令队列和响应队列，对客户端的输入和输出做缓冲处理。

### 持久化
Redis的数据全部在内存里，如果突然宕机，数据就会全部丢失，因此必须有持久化机制保证数据不会因为故障而丢失。Redis的持久化机制分为两种，快照和AOF日志。快照是一次全量备份，AOF日志时增量备份。

| 对比点 | 快照 | AOF日志 |
| :---: | :---: | :---: |
| 量 | 全量 | 增量 |
| 内存数据 | 二进制序列化 | 数据修改的指令记录文本 | 
| 恢复速度 | 较快 | 较慢 |

#### 快照
Redis是单线程程序，不能一边服务客户端的请求，一边还要进行耗时的文件IO操作，否则会严重拖累服务器的性能。Redis怎样解决这个问题的？  
使用多进程COW（Copy On Write）机制。fork一个子进程，快照的持久化全部交给子进程处理，父进程继续处理客户端请求。数据段由很多操作系统的页面组合而成，当父进程对其中一个页面的数据进行修改时，会将共享的页面复制一份分离出来，然后对复制的页面进行修改，子进程它能看到的数据在它产生的一瞬间凝固了，也就是为什么要叫“快照”。  

#### AOF日志
AOF日志存储的是Redis服务器的顺序指令序列，AOF日志只记录对内存进行修改的指令记录。先执行指令，再日志存盘。AOF日志会随着时间越来越长，如果宕机重启，重放会非常耗时，导致Redis长时间无法对外提供服务，需要对AOF进行瘦身。其原理是开辟一个子进程对内存遍历，转换成一系列的Redis操作指令，序列化到一个新的AOF日志文件中。序列化完成后，再将这段操作时间内发生的增量AOF日志追加到新的AOF日志中。

#### 混合持久化
如果使用快照放在会恢复内存数据，快照期间内被修改的数据是没法恢复的。而用AOF日志重放，相对又慢很多。所以将两者结合，就有了混合持久化。  
其基本原理是先加载快照rdb的内容，然后在重放增量AOF日志。AOF日志不再是全量日志，而是自持久化开始到结束这段时间内发生的增量AOF日志，通常比较小。这样就提升了恢复的速度。

参考资料：  
[存储结构体信息到底该使用hash还是string?]

[存储结构体信息到底该使用hash还是string?]:https://stackoverflow.com/questions/16375188/redis-strings-vs-redis-hashes-to-represent-json-efficiency
